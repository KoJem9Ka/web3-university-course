import { FC } from 'react';
import { observer } from 'mobx-react-lite';
import { helloTokenContractStore } from '../stores/hello-token-contract.store.ts';
import { Button, Card, CardBody, CardFooter, Input, Link } from '@nextui-org/react';
import type { Address } from 'abitype';
import { toMoreReadable, toNormal, toStoreFormat } from '../helpers';
import { isAddress } from 'viem';
import { userStore } from '../stores/user-store.ts';
import { useFormik } from 'formik';
import * as yup from 'yup';
import { every } from 'lodash';
import { getAccount, HelloContract } from '../contracts';
import { toast } from 'sonner';
import { mumbaiTxUrl } from '../shared/constants.ts';

const validationSchema = yup.object().shape({
  recipient: yup.string().required('–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    .test('isValidAddress', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å', value => isAddress(value))
    .test('isNotUserAccount', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Å–µ–±–µ', value => value !== userStore.account),
  amount: yup.number()
    .required('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    .typeError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    .positive('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è').test(
      'isWithinBalance',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å',
      value => toStoreFormat(value, helloTokenContractStore.decimals || 0) <= (userStore.balance || 0n),
    ),
});

export const SendSection: FC = observer(() => {
  const { isUserLoading, balance } = userStore;
  const { isHelloContractLoading, symbol, decimals } = helloTokenContractStore;

  const formik = useFormik<{ recipient: Address, amount: string }>({
    initialValues: { recipient: '0x', amount: '0' },
    initialTouched: { recipient: false, amount: false },
    validationSchema,
    onSubmit: async ({ recipient, amount }) => {
      try {
        const tx = await HelloContract.write.transfer(
          [recipient, toStoreFormat(amount, decimals)],
          { account: await getAccount(true) },
        );
        toast.success(<>
          {'‚úîÔ∏è '}
          <Link className='whitespace-nowrap' showAnchorIcon href={mumbaiTxUrl(tx)} target="_blank">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</Link>
          {' –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∞!'}
        </>);
      } catch (error) {
        const errorMessage = `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${error instanceof Error ? error.message : error}`;
        toast.error(errorMessage);
        throw error;
      }
    },
  });

  const isLoading = formik.isSubmitting || isUserLoading || isHelloContractLoading;
  const isSubmittable = !isLoading && (!every(formik.touched) || formik.isValid);

  return (
    <div className="max-w-[700px] mx-auto">
      <h2 className="text-start text-3xl mb-3">–ü–µ—Ä–µ–≤–æ–¥</h2>
      <Card>
        <CardBody className="flex flex-col gap-3">
          <Input
            {...formik.getFieldProps('recipient')}
            label="–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
            labelPlacement="outside"
            startContent={'üòé'}
            readOnly={isLoading}
            errorMessage={formik.touched.recipient && formik.errors.recipient}
            isInvalid={formik.touched.recipient && !!formik.errors.recipient}
          />
          <Input
            {...formik.getFieldProps('amount')}
            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            labelPlacement="outside"
            startContent={'üíé'}
            readOnly={isLoading}
            errorMessage={formik.touched.amount && formik.errors.amount}
            isInvalid={formik.touched.amount && !!formik.errors.amount}
            description={`–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–æ ${toNormal(balance, decimals)} ${symbol}`}
          />
        </CardBody>
        <CardFooter className="justify-between">
          <p className="text-gray-500">–ë—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {toMoreReadable(toStoreFormat(formik.values.amount, decimals))} –µ–¥.</p>
          <Button
            disabled={!isSubmittable}
            isLoading={isLoading}
            color={isSubmittable || isLoading ? 'primary' : 'danger'}
            variant={!isSubmittable ? 'faded' : undefined}
            className={!isSubmittable ? 'cursor-not-allowed' : undefined}
            onClick={() => formik.handleSubmit()}
          >–ü–µ—Ä–µ–≤–µ—Å—Ç–∏</Button>
        </CardFooter>
      </Card>
    </div>
  );
});
